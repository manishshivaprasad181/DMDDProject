SET SERVEROUTPUT ON;

-- Insert records into the 'PRODUCT' table
BEGIN
  INSERT INTO PRODUCT (P_ID, P_NAME, P_DESC, P_PRICE, P_QUANTITY) VALUES (PID_SEQ.NEXTVAL, 'Product1', 'Description1', 10.99, 100);
  INSERT INTO PRODUCT (P_ID, P_NAME, P_DESC, P_PRICE, P_QUANTITY) VALUES (PID_SEQ.NEXTVAL, 'Product2', 'Description2', 20.99, 150);
  INSERT INTO PRODUCT (P_ID, P_NAME, P_DESC, P_PRICE, P_QUANTITY) VALUES (PID_SEQ.NEXTVAL, 'Product3', 'Description3', 30.99, 200);
  
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Records inserted into PRODUCT table successfully');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- Insert records into the 'BRAND' table
BEGIN
  INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_ID_SEQ.NEXTVAL, 'Brand1');
  INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_ID_SEQ.NEXTVAL, 'Brand2');
  INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_ID_SEQ.NEXTVAL, 'Brand3');
  
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Records inserted into BRAND table successfully');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- Insert records into the 'CATEGORY' table
BEGIN
  INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_NAME, PARENT_ID) VALUES (CATEGORY_ID_SEQ.NEXTVAL, 'Category1', NULL);
  INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_NAME, PARENT_ID) VALUES (CATEGORY_ID_SEQ.NEXTVAL, 'Category2', NULL);
  INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_NAME, PARENT_ID) VALUES (CATEGORY_ID_SEQ.NEXTVAL, 'Category3', NULL);
  
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Records inserted into CATEGORY table successfully');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- Insert records into the 'USERS' table
BEGIN
  INSERT INTO USERS (USER_ID, F_NAME, L_NAME, EMAIL, PASSWORD, USR_TYPE, PHONE, HOUSE_NO, ST_ADDR, CITY, STATE, ZIPCODE) VALUES (USER_ID_SEQ.NEXTVAL, 'John', 'Doe', 'john.doe@example.com', 'password123', 'Customer', 1234567890, 101, 'Street A', 'City A', 'State A', 12345);
  INSERT INTO USERS (USER_ID, F_NAME, L_NAME, EMAIL, PASSWORD, USR_TYPE, PHONE, HOUSE_NO, ST_ADDR, CITY, STATE, ZIPCODE) VALUES (USER_ID_SEQ.NEXTVAL, 'Jane', 'Smith', 'jane.smith@example.com', 'password456', 'Customer', 9876543210, 202, 'Street B', 'City B', 'State B', 54321);
  INSERT INTO USERS (USER_ID, F_NAME, L_NAME, EMAIL, PASSWORD, USR_TYPE, PHONE, HOUSE_NO, ST_ADDR, CITY, STATE, ZIPCODE) VALUES (USER_ID_SEQ.NEXTVAL, 'Bob', 'Johnson', 'bob.johnson@example.com', 'password789', 'Admin', 5555555555, 303, 'Street C', 'City C', 'State C', 67890);
  
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Records inserted into USERS table successfully');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- Insert records into the 'WAREHOUSE' table
BEGIN
  INSERT INTO WAREHOUSE (WAREHOUSE_ID) VALUES (WAREHOUSE_ID_SEQ.NEXTVAL);
  INSERT INTO WAREHOUSE (WAREHOUSE_ID) VALUES (WAREHOUSE_ID_SEQ.NEXTVAL);
  INSERT INTO WAREHOUSE (WAREHOUSE_ID) VALUES (WAREHOUSE_ID_SEQ.NEXTVAL);
  
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Records inserted into WAREHOUSE table successfully');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- Insert records into the 'RATING' table
BEGIN
  INSERT INTO RATING (RATING_ID, SCORE) VALUES (RATING_ID_SEQ.NEXTVAL, 4.5);
  INSERT INTO RATING (RATING_ID, SCORE) VALUES (RATING_ID_SEQ.NEXTVAL, 3.8);
  INSERT INTO RATING (RATING_ID, SCORE) VALUES (RATING_ID_SEQ.NEXTVAL, 4.0);
  
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Records inserted into RATING table successfully');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- Insert records into the 'SHIPPER' table
BEGIN
  INSERT INTO SHIPPER (SHIPPER_ID, CARRIER) VALUES (SHIPPER_ID_SEQ.NEXTVAL, 'Carrier1');
  INSERT INTO SHIPPER (SHIPPER_ID, CARRIER) VALUES (SHIPPER_ID_SEQ.NEXTVAL, 'Carrier2');
  INSERT INTO SHIPPER (SHIPPER_ID, CARRIER) VALUES (SHIPPER_ID_SEQ.NEXTVAL, 'Carrier3');
  
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Records inserted into SHIPPER table successfully');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/








-- Select all records from the 'PRODUCT' table
SELECT * FROM PRODUCT;


